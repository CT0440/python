python Basics
--------------
Python is a high-level, interpreted, and general-purpose programming language. 
Python emphasizes code readability and simplicity, which makes it an excellent language for beginners and 
experienced developers.
we don’t need to declare the type of variable because it is a dynamically typed language. 
For example, x = 10 Here, x can be anything such as String, int, etc. 

Features in Python
-------------------
1. Free and Open Source
2. Easy to code
3. Easy to Read
4. Object-Oriented Language
5. GUI Programming Support
6. High-Level Language
7. Large Community Support
8. Easy to Debug
9. Python is a Portable language
10. Python is an Integrated language
11. Interpreted Language
12. Large Standard Library 
13. Dynamically Typed Language
14. Frontend and backend development
15. Allocating Memory Dynamically

Python Applications in Real World
---------------------------------
* Web Development
* Data Science and Analytics
* Artificial Intelligence and Machine Learning
* Automation and Scripting

Python Variable
---------------
Python Variable is containers that store values. Python is not “statically typed”. 
An Example of a Variable in Python is a representational name that serves as a pointer to an object. 
Once an object is assigned to a variable, it can be referred to by that name.

Rules for Python variables
---------------------------
A Python variable name must start with a letter or the underscore character.
A Python variable name cannot start with a number.
A Python variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ ).
Variable in Python names are case-sensitive (name, Name, and NAME are three different variables).
The reserved words(keywords) in Python cannot be used to name the variable in Python.

variables are classified into different types based on their scope, lifetime, and usage.

1. Based on Scope and Lifetime
Local Variables: Declared inside a function and accessible only within that function.
Global Variables: Declared outside any function and accessible throughout the script.
Nonlocal Variables: Used inside nested functions and refer to variables from the outer function.

*A global variable exists as long as the program runs.
* It can be accessed from anywhere in the script unless modified inside a function (which requires the global keyword).

* A nonlocal variable exists as long as the enclosing function is active.
* Once the enclosing function completes execution, the nonlocal variable is destroyed.
* It allows modifying a variable in an outer function (but not global scope).

2. Based on Data Storage
Instance Variables: Belong to an instance of a class and are defined inside the __init__ method.
Class Variables: Shared among all instances of a class, declared within the class but outside any method.

3. Special Variables
Magic (Dunder) Variables: Start and end with double underscores (e.g., __name__, __init__, __str__).
Constants (Conventionally Uppercase): Python doesn’t have true constants, but variables written in uppercase 
(e.g., PI = 3.14) are treated as constants by convention.

4. Environment Variables
These are system-level variables that can be accessed using the os module.




datatypes
---------
Python Data types are the classification or categorization of data items. 
It represents the kind of value that tells what operations can be performed on a particular data. 
Since everything is an object in Python programming, Python data types are classes and variables are instances (objects) of these classes. 
The following are the standard or built-in data types in Python:

Numeric – int, float, complex
Sequence Type – string, list, tuple
Mapping Type – dict
Boolean – bool
Set Type – set, frozenset
Binary Types – bytes, bytearray, memoryview

numeric datatypes:
Python’s int type has arbitrary precision, meaning it can handle integers of any size, 
growing dynamically as the number increases, without overflow.

sequence types:
sequence types are used to store ordered collections of elements. 
Sequences allow indexing, slicing, and iteration, and they can hold different types of objects such as 
numbers, strings, and other data types.

range Data Type in Python:
The range data type represents a sequence of numbers and is commonly used in loops (like for loops). 
It generates the numbers on-demand (lazy evaluation), which means it doesn't store them all in memory, making it efficient.

Syntax of range()
range(start, stop, step)

Type conversion
----------------
In Python, type conversion refers to converting one data type into another. 
There are two main types of type conversion:

Implicit Type Conversion (Type Casting)
Explicit Type Conversion (Type Casting)

1. Implicit Type Conversion:
Python automatically converts a lower data type to a higher one when required. 
This is called implicit type conversion.

2. Explicit Type Conversion:
This occurs when you manually convert one type to another using built-in functions. 
Python provides various functions for explicit type conversion.

Operators
==========
In Python programming, Operators in general are used to perform operations on values and variables. 
These are standard symbols used for logical and arithmetic operations.

Types of Operators in Python
----------------------------
* Arithmetic Operators
* Comparison Operators
* Logical Operators
* Bitwise Operators
* Assignment Operators
* Identity Operators and Membership Operators

Arithmetic Operators
---------------------
Python Arithmetic operators are used to perform basic mathematical operations like addition, subtraction, multiplication and division.

In Python 3.x the result of division is a floating-point while in Python 2.x division of 2 integers was an integer. 
To obtain an integer result in Python 3.x floored (// integer) is used.

Comparison or Relational Operators
-----------------------------------
In Python Comparison or Relational operators compares the values. 
It either returns True or False according to the condition.

Logical Operators
------------------
Python Logical operators perform Logical AND, Logical OR and Logical NOT operations. 
It is used to combine conditional statements.

The precedence of Logical Operators in Python is as follows:

* Logical not
* logical and
* logical or

Bitwise operators
-----------------
Python Bitwise operators act on bits and perform bit-by-bit operations. 
These are used to operate on binary numbers.

Bitwise Operators in Python are as follows:

Bitwise NOT
Bitwise Shift
Bitwise AND
Bitwise XOR
Bitwise OR

Assignment Operators
--------------------
Python Assignment operators are used to assign values to the variables. 
This operator is used to assign the value of the right side of the expression to the left side operand.

Identity operators
------------------
In Python, is and is not are the identity operators both are used to check if two values are located 
on the same part of the memory. 
Two variables that are equal do not imply that they are identical. 

is          True if the operands are identical 
is not      True if the operands are not identical 

Membership Operators
---------------------
In Python, in and not in are the membership operators that are used to test whether a value or variable is 
in a sequence.

in            True if value is found in the sequence
not in        True if value is not found in the sequence

Ternary Operators
-----------------
in Python, Ternary operators also known as conditional expressions are operators that evaluate something 
based on a condition being true or false. It was added to Python in version 2.5. 

It simply allows testing a condition in a single line replacing the multiline if-else making the code compact.

Precedence and Associativity of Operators
-----------------------------------------
In Python, Operator precedence and associativity determine the priorities of the operator.

Operator Precedence:
This is used in an expression with more than one operator with different precedence to determine which 
operation to perform first.

Operator Associativity:
If an expression contains two or more operators with the same precedence then Operator Associativity is used
to determine. It can either be Left to Right or from Right to Left.


Precedence Order (Highest to Lowest):  
1. `()`        → Parentheses  
2. `**`        → Exponentiation  
3. `+x`, `-x`, `~x`  → Unary plus, minus, bitwise NOT  
4. `*`, `/`, `//`, `%`  → Multiplication, Division, Floor division, Modulus  
5. `+`, `-`  → Addition, Subtraction  
6. `<<`, `>>`  → Bitwise shift operators  
7. `&`  → Bitwise AND  
8. `^`  → Bitwise XOR  
9. `|`  → Bitwise OR  
10. `==`, `!=`, `>`, `<`, `>=`, `<=`  → Comparison operators  
11. `not`  → Logical NOT  
12. `and`  → Logical AND  
13. `or`  → Logical OR  

2. Associativity of Operators  
When two operators of the same precedence appear, associativity determines the order of evaluation.  

| Operator(s)                      | Associativity | Example                         |
|----------------------------------|---------------|---------------------------------|
| `**`                             | Right to Left | `2 ** 3 ** 2 = 512`             |
| `+x`, `-x`, `~x`                 | Right to Left | `-(-5) = 5`                     |
| `*`, `/`, `//`, `%`, `+`, `-`    | Left to Right | `10 - 5 + 2 = 7`                |
| `<<`, `>>`, `&`, `^`, `|`        | Left to Right | `5 | 3 = 7`                     |
| `==`, `!=`, `>`, `<`, `>=`, `<=` | Left to Right | `10 > 5 == True`                |
| `not`                            | Right to Left | `not not True = True`           |
| `and`, `or`                      | Left to Right | `True and False or True = True` |

3. Examples  
print(3 + 5 * 2)       # Output: 13 (Multiplication before Addition)
print(10 / 2 * 3)      # Output: 15.0 (Left to Right Associativity)
print(2 ** 3 ** 2)     # Output: 512 (Right to Left Associativity)
print(10 > 5 == True)  # Output: True (Comparison operators Left to Right)



Input/Output & Formatting Strings in Python  
-------------------------------------------
Python provides the `input()` function to take user input as a string. 
For numerical input, convert it using int() or float() 

String Formatting in Python
---------------------------
Python provides multiple ways to format strings.
a) concatenation
b) Using format() Method
c) Using f-strings (Python 3.6+)
d) Using %-formatting (Old Method, Not Recommended)


























